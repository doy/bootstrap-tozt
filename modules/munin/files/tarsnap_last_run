#!/usr/bin/env ruby

require 'date'

def parse_archive(archive)
  # tozt-daily-2018-12-31_03:34:13-homedoypass
  m = archive.match(/
    \A
    (?<host>[a-z]+) # tozt
    -
    (?<period>[a-z]+) # daily
    -
    (?<year>[0-9]+) # 2018
    -
    (?<month>[0-9]+) # 12
    -
    (?<day>[0-9]+) # 31
    _
    (?<hour>[0-9]+) # 03
    :
    (?<minute>[0-9]+) # 34
    :
    (?<second>[0-9]+) # 13
    -
    (?<name>[a-z_]+) # homedoypass
    \z
  /x)
  raise "failed to parse archive name '#{archive}'" if m.nil?

  parsed = m.names.zip(m.captures).to_h
  parsed["time"] = Time.new(
    m["year"],
    m["month"],
    m["day"],
    m["hour"],
    m["minute"],
    m["second"]
  )
  parsed
end

archives = %x(tarsnap --list-archives)
  .lines
  .map(&:chomp)
  .map{|s| parse_archive(s)}
if ARGV.length > 0 && ARGV[0] == "config"
  puts "graph_title tarsnap time since last run"
  puts "graph_category backups"
  puts "graph_vlabel time since last run (days)"
  puts "graph_args -l 0"
  puts "graph_scale no"

  names = archives.map{|h| h["name"]}.sort.uniq
  names.each do |name|
    puts "#{name}.label #{name}"
    puts "#{name}.warning 1.05"
    puts "#{name}.critical 2"
  end
else
  now = Time.now
  most_recent_since = {}
  archives.each do |archive|
    name = archive["name"]
    since = now - archive["time"]

    if most_recent_since[name].nil? || since < most_recent_since[name]
      most_recent_since[name] = since
    end
  end

  most_recent_since.sort.each do |name, since|
    puts "#{name}.value #{since.to_f / 60.0 / 60.0 / 24.0}"
  end
end
